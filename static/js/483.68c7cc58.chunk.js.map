{"version":3,"file":"static/js/483.68c7cc58.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/MyContacts/MyContacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const InptuWrapper = styled.div`\n  max-width: 200px;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n\n  border: 2px solid black;\n  border-radius: 5px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\n\nimport { useState } from 'react';\n\nimport { InptuWrapper } from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(state => state.contacts.items);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (isDublicate(name)) {\n      alert('Contact already exists');\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  const isDublicate = name => {\n    const normalizedName = name.toLowerCase();\n    const result = contacts.find(({ name }) => {\n      return name.toLowerCase() === normalizedName;\n    });\n\n    return Boolean(result);\n  };\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        console.warn(`no field name - ${name}`);\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <InptuWrapper>\n          <label> Name</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n          <label> Number</label>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n\n          <button type=\"submit\"> Add contact</button>\n        </InptuWrapper>\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n\n/*\nclass ContactForm extends Component {\n  state = { name: '', number: '' };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const result = this.props.onSubmit(this.state);\n    if (result) {\n      this.setState({ name: '', number: '' });\n    }\n  };\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  };\n  render() {\n    const { name, number } = this.state;\n    const { handleChange, handleSubmit } = this;\n    return (\n      <div>\n        <form onSubmit={handleSubmit}>\n          <InptuWrapper>\n            <label> Name</label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              value={name}\n              onChange={handleChange}\n            />\n            <label> Number</label>\n            <input\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              value={number}\n              onChange={handleChange}\n            />\n\n            <button type=\"submit\"> Add contact</button>\n          </InptuWrapper>\n        </form>\n      </div>\n    );\n  }\n}\n*/\n","import styled from '@emotion/styled';\n\nexport const FilterWrapper = styled.div`\n  max-width: 200px;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n\n  border: 2px solid black;\n  border-radius: 5px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\n\nimport { FilterWrapper } from './Filter.styled';\n\nconst Filter = () => {\n  const filterValue = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const handleFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n\n  return (\n    <FilterWrapper>\n      <label>Find contacts by name</label>\n      <input\n        name=\"filter\"\n        value={filterValue}\n        onChange={handleFilter}\n        placeholder=\"Find contacts by name\"\n      />\n    </FilterWrapper>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const ListWrapper = styled.div`\n  margin-top: 20px;\n  max-width: 200px;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n\n  border: 2px solid black;\n  border-radius: 5px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport { fetchContacts, deleteContact } from 'redux/operations';\n\nimport { ListWrapper } from './ContactList.styled';\n\nconst ContactList = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const loader = useSelector(state => state.contacts.isLoading);\n  const filter = useSelector(state => state.filter);\n  const error = useSelector(state => state.contacts.error);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilteredContacts = () => {\n    if (!filter) {\n      return contacts;\n    }\n    const normalizedFilter = filter.toLowerCase();\n    const result = contacts.filter(({ name }) => {\n      return name.toLowerCase().includes(normalizedFilter);\n    });\n    return result;\n  };\n\n  const contactItem = getFilteredContacts().map(({ id, name, number }) => (\n    <li key={id}>\n      <p>\n        {name}: {number}\n      </p>\n      <button onClick={() => dispatch(deleteContact(id))} type=\"button\">\n        Delete\n      </button>\n    </li>\n  ));\n  return (\n    <ListWrapper>\n      {loader ? <span>Loading...</span> : <ul>{contactItem}</ul>}\n      {error && <span>{error}</span>}\n    </ListWrapper>\n  );\n};\n\nexport default ContactList;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\n\nconst MyContacts = () => {\n  return (\n    <>\n      <h2>Phonebook</h2>\n      <ContactForm />\n      <div>\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    </>\n  );\n};\n\nexport default MyContacts;\n"],"names":["InptuWrapper","styled","useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","state","items","isDublicate","normalizedName","toLowerCase","result","find","Boolean","handleChange","target","value","console","warn","onSubmit","e","preventDefault","alert","addContact","type","pattern","title","required","onChange","FilterWrapper","filterValue","filter","setFilter","placeholder","ListWrapper","loader","isLoading","error","useEffect","fetchContacts","contactItem","normalizedFilter","includes","getFilteredContacts","map","id","onClick","deleteContact"],"sourceRoot":""}